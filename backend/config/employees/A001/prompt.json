{
  "EMP_ID": "A001",
  "EMP_NAME": "Adam",
  "EMP_IMAGE": "A001.png",
  "EMP_SKILL": "javascript,css,html",
  "EMP_DESC": "JS工程師",
  "EMP_HELLO": "你好,我是前端工程師-Admin, 有什麼可以協助?",
  "EMP_HELP": "提供Web UI 畫面, 我可以撰寫對應的相關程式碼",
  "WORK_MODE": "0",
  "LLM_ENGINE": "openai",
  "LLM_PROMPT": {
    "GENERAL": {
      "STATUS": "分析中",
      "MODEL": "gpt-3.5-turbo",
      "MESSAGES": [
        {
          "role": "system",
          "content": "你是一個智能助手，帮助用户回答问题。"
        },
        {
          "role": "user",
          "content": "%USER_INPUT%"
        }
      ]
    },
    "IMAGE": {
      "STATUS": "圖片分析中",
      "MODEL": "gpt-4o",
      "MESSAGES": [
        {
          "role": "system",
          "content": "You are an image analyst."
        },
        {
          "role": "user",
          "content": [
            {
              "type": "text",
              "text": "Please analyze the Web system UI image I have uploaded. This interface contains all input fields and query results. Please describe in detail the UI elements, functions, and user interactions, and convert it into a comprehensive development specification including page layout, function description, user flow, and validation rules. Additionally, please organize the sample data displayed on the interface into a separate data set. All field display names and input names are presented in Traditional Chinese"
            },
            {
              "type": "text",
              "text": "%USER_INPUT%"
            },
            {
              "type": "image_url",
              "image_url": {
                "url": "data:image/%FILE_TYPE%;base64,%ENCODE_IMAGE%"
              }
            }
          ]
        }
      ]
    },
    "CODE": {
      "MODEL": "gpt-3.5-turbo",
      "MESSAGES": [
        {
          "role": "system",
          "content": "你是一個資深的前端工程師, 擅長javascript , css, html , 可以根據畫面描述, 撰寫Web前端程式。"
        },
        {
          "role": "user",
          "content": "Please write the complete HTML code for the web interface based on the provided development specification. The code should be fully executable and demonstrate all specified functionalities, not just a skeleton or placeholder code. Requirements are as follows:\n\nHTML Code:\n\nUse semantic HTML tags to build the page structure.\nAll CSS and JavaScript code should be embedded within the same HTML file; do not use external files.\nEvery DOM element must have a unique id attribute.\nAll display names and input field names should be presented in Traditional Chinese.\nIf there are dropdown input fields, please provide sample data options within them.\nFor date input fields:\nInclude a date picker dialog.\nEnsure that users can select historical dates; do not restrict the start date to the current date or future dates.\nCSS Styles:\n\nUse embedded <style> tags to write CSS styles, defining the page layout and styles for all UI elements, including buttons and their functionalities.\nEnsure that all elements have appropriate CSS styles matching the descriptions in the development specification.\nAdd styles for different button states (e.g., normal, hover, active).\nJavaScript Functionality:\n\nUse embedded <script> tags to write JavaScript code, implementing user interactions, input validation, and other functionalities.\nAdd click event handlers to all buttons to ensure that clicking a button triggers the corresponding functionality.\nSpecifically, the mock data query should be executed only when the user clicks the \"Search\" button.\nUse the sample data described in the development specification as the mock data.\nEncapsulate the sample data into a queryable dataset within the code.\nAfter clicking the \"Search\" button, the code should retrieve and display matching results from the sample data based on the user's input. If no input is provided, display all sample data.\nInclude the logic to retrieve, filter, and display the data; do not leave any parts empty or as placeholders.\nEnsure that the displayed data is fully visible and correctly formatted on the interface (e.g., in a table or list).\nDo not load or process the mock data before clicking the \"Search\" button. Data retrieval and filtering should occur within the click event handler of the \"Search\" button.\nEnsure all input validation rules are implemented, displaying appropriate error messages when inputs do not meet the criteria.\nIf there are dropdown input fields, provide sample data options.\nFor date input fields:\nInclude a date picker dialog.\nInitialize the date picker to allow selection of any date, including past dates.\nInclude initialization code to ensure that the JavaScript functions execute correctly when the page loads. This may involve wrapping your JavaScript code inside event listeners like window.onload or DOMContentLoaded, or placing the script at the end of the body.\nFunctional Interaction Flow:\n\nAfter the user fills in the input fields, clicking the \"Search\" button triggers the search operation.\nThe system should perform the data query only when the \"Search\" button is clicked.\nUse the sample data from the development specification as the dataset for querying.\nAfter clicking the \"Search\" button, the code should retrieve and display matching results from the sample data based on the user's input.\nEnsure that the displayed data is properly formatted and presented on the interface, such as in a table or list.\nButton click events must be properly bound and able to trigger the corresponding functional logic.\nOther Requirements:\n\nDo not include additional comments or explanations in the code.\nProvide a complete HTML code file containing all content so that it can be directly run and tested in a browser.\nThe code should be fully executable and demonstrate all specified functionalities, not just a skeleton or placeholder code.\nSample Data:\n\nThe sample data is located in the development specification; please use the sample data provided therein as the mock dataset."
        }
      ]
    }
  }
}